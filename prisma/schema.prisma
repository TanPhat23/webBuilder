generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Elements {
  Id                                          String     @id(map: "PK_Elements")
  Type                                        String     @db.VarChar(8)
  Content                                     String?
  IsSelected                                  Boolean
  Styles                                      String
  X                                           Float
  Y                                           Float
  Src                                         String?
  Href                                        String?
  ParentId                                    String?
  ProjectId                                   String
  Order                                       Int        @default(0)
  Name                                        String?
  ButtonType                                  String?
  ElementId                                   String?
  Options                                     String?
  TailwindStyles                              String?
  Elements_Elements_ElementIdToElements       Elements?  @relation("Elements_ElementIdToElements", fields: [ElementId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Elements_Elements_ElementId")
  other_Elements_Elements_ElementIdToElements Elements[] @relation("Elements_ElementIdToElements")
  Elements                                    Elements?  @relation("ElementsToElements", fields: [ParentId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Elements_Elements_ParentId")
  other_Elements                              Elements[] @relation("ElementsToElements")
  Projects                                    Projects   @relation(fields: [ProjectId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Elements_Projects_ProjectId")
  Settings                                    Settings[]

  @@index([ParentId], map: "IX_Elements_ParentId")
  @@index([ProjectId], map: "IX_Elements_ProjectId")
  @@index([ElementId], map: "IX_Elements_ElementId")
}

model Projects {
  Id          String     @id(map: "PK_Projects")
  Name        String
  Description String?
  OwnerId     String
  published   Boolean    @default(false)
  subdomain   String?
  Styles      String     @default("")
  Elements    Elements[]
  Users       Users      @relation(fields: [OwnerId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Projects_Users_OwnerId")

  @@index([OwnerId], map: "IX_Projects_OwnerId")
}

model Users {
  Id        String     @id(map: "PK_Users")
  Email     String
  FirstName String?
  LastName  String?
  ImageUrl  String?
  CreatedAt DateTime   @db.Timestamptz(6)
  UpdatedAt DateTime   @db.Timestamptz(6)
  Images    Images[]
  Projects  Projects[]
}

model EFMigrationsHistory {
  MigrationId    String @id(map: "PK___EFMigrationsHistory") @db.VarChar(150)
  ProductVersion String @db.VarChar(32)

  @@map("__EFMigrationsHistory")
}

model Images {
  ImageId   String  @id(map: "PK_Images")
  ImageName String?
  UserId    String
  ImageLink String  @default("")
  Users     Users   @relation(fields: [UserId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Images_Users_UserId")

  @@index([UserId], map: "IX_Images_UserId")
}

model Settings {
  Id          String    @id(map: "PK_Settings")
  Name        String
  SettingType String
  Settings    String
  ElementId   String?
  Elements    Elements? @relation(fields: [ElementId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Settings_Elements_ElementId")

  @@index([ElementId], map: "IX_Settings_ElementId")
}
